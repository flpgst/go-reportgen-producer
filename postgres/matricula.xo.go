package postgres

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// Matricula represents a row from 'public.matricula'.
type Matricula struct {
	ID       int           `json:"id"`        // id
	Codigo   string        `json:"codigo"`    // codigo
	PessoaID sql.NullInt64 `json:"pessoa_id"` // pessoa_id
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Matricula] exists in the database.
func (m *Matricula) Exists() bool {
	return m._exists
}

// Deleted returns true when the [Matricula] has been marked for deletion
// from the database.
func (m *Matricula) Deleted() bool {
	return m._deleted
}

// Insert inserts the [Matricula] to the database.
func (m *Matricula) Insert(ctx context.Context, db DB) error {
	switch {
	case m._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case m._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.matricula (` +
		`codigo, pessoa_id` +
		`) VALUES (` +
		`$1, $2` +
		`) RETURNING id`
	// run
	logf(sqlstr, m.Codigo, m.PessoaID)
	if err := db.QueryRowContext(ctx, sqlstr, m.Codigo, m.PessoaID).Scan(&m.ID); err != nil {
		return logerror(err)
	}
	// set exists
	m._exists = true
	return nil
}

// Update updates a [Matricula] in the database.
func (m *Matricula) Update(ctx context.Context, db DB) error {
	switch {
	case !m._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case m._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.matricula SET ` +
		`codigo = $1, pessoa_id = $2 ` +
		`WHERE id = $3`
	// run
	logf(sqlstr, m.Codigo, m.PessoaID, m.ID)
	if _, err := db.ExecContext(ctx, sqlstr, m.Codigo, m.PessoaID, m.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Matricula] to the database.
func (m *Matricula) Save(ctx context.Context, db DB) error {
	if m.Exists() {
		return m.Update(ctx, db)
	}
	return m.Insert(ctx, db)
}

// Upsert performs an upsert for [Matricula].
func (m *Matricula) Upsert(ctx context.Context, db DB) error {
	switch {
	case m._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.matricula (` +
		`id, codigo, pessoa_id` +
		`) VALUES (` +
		`$1, $2, $3` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`codigo = EXCLUDED.codigo, pessoa_id = EXCLUDED.pessoa_id `
	// run
	logf(sqlstr, m.ID, m.Codigo, m.PessoaID)
	if _, err := db.ExecContext(ctx, sqlstr, m.ID, m.Codigo, m.PessoaID); err != nil {
		return logerror(err)
	}
	// set exists
	m._exists = true
	return nil
}

// Delete deletes the [Matricula] from the database.
func (m *Matricula) Delete(ctx context.Context, db DB) error {
	switch {
	case !m._exists: // doesn't exist
		return nil
	case m._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.matricula ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, m.ID)
	if _, err := db.ExecContext(ctx, sqlstr, m.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	m._deleted = true
	return nil
}

// MatriculaByCodigo retrieves a row from 'public.matricula' as a [Matricula].
//
// Generated from index 'matricula_codigo_idx'.
func MatriculaByCodigo(ctx context.Context, db DB, codigo string) ([]*Matricula, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, codigo, pessoa_id ` +
		`FROM public.matricula ` +
		`WHERE codigo = $1`
	// run
	logf(sqlstr, codigo)
	rows, err := db.QueryContext(ctx, sqlstr, codigo)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Matricula
	for rows.Next() {
		m := Matricula{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&m.ID, &m.Codigo, &m.PessoaID); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &m)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// MatriculaByPessoaID retrieves a row from 'public.matricula' as a [Matricula].
//
// Generated from index 'matricula_pessoa_id_idx'.
func MatriculaByPessoaID(ctx context.Context, db DB, pessoaID sql.NullInt64) ([]*Matricula, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, codigo, pessoa_id ` +
		`FROM public.matricula ` +
		`WHERE pessoa_id = $1`
	// run
	logf(sqlstr, pessoaID)
	rows, err := db.QueryContext(ctx, sqlstr, pessoaID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Matricula
	for rows.Next() {
		m := Matricula{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&m.ID, &m.Codigo, &m.PessoaID); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &m)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// MatriculaByID retrieves a row from 'public.matricula' as a [Matricula].
//
// Generated from index 'matricula_pk'.
func MatriculaByID(ctx context.Context, db DB, id int) (*Matricula, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, codigo, pessoa_id ` +
		`FROM public.matricula ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	m := Matricula{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&m.ID, &m.Codigo, &m.PessoaID); err != nil {
		return nil, logerror(err)
	}
	return &m, nil
}

// Pessoa returns the Pessoa associated with the [Matricula]'s (PessoaID).
//
// Generated from foreign key 'matricula_fk'.
func (m *Matricula) Pessoa(ctx context.Context, db DB) (*Pessoa, error) {
	return PessoaByID(ctx, db, int(m.PessoaID.Int64))
}
