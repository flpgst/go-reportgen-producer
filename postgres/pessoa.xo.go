package postgres

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// Pessoa represents a row from 'public.pessoa'.
type Pessoa struct {
	ID   int    `json:"id"`   // id
	Nome string `json:"nome"` // nome
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Pessoa] exists in the database.
func (p *Pessoa) Exists() bool {
	return p._exists
}

// Deleted returns true when the [Pessoa] has been marked for deletion
// from the database.
func (p *Pessoa) Deleted() bool {
	return p._deleted
}

// Insert inserts the [Pessoa] to the database.
func (p *Pessoa) Insert(ctx context.Context, db DB) error {
	switch {
	case p._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case p._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.pessoa (` +
		`nome` +
		`) VALUES (` +
		`$1` +
		`) RETURNING id`
	// run
	logf(sqlstr, p.Nome)
	if err := db.QueryRowContext(ctx, sqlstr, p.Nome).Scan(&p.ID); err != nil {
		return logerror(err)
	}
	// set exists
	p._exists = true
	return nil
}

// Update updates a [Pessoa] in the database.
func (p *Pessoa) Update(ctx context.Context, db DB) error {
	switch {
	case !p._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case p._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.pessoa SET ` +
		`nome = $1 ` +
		`WHERE id = $2`
	// run
	logf(sqlstr, p.Nome, p.ID)
	if _, err := db.ExecContext(ctx, sqlstr, p.Nome, p.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Pessoa] to the database.
func (p *Pessoa) Save(ctx context.Context, db DB) error {
	if p.Exists() {
		return p.Update(ctx, db)
	}
	return p.Insert(ctx, db)
}

// Upsert performs an upsert for [Pessoa].
func (p *Pessoa) Upsert(ctx context.Context, db DB) error {
	switch {
	case p._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.pessoa (` +
		`id, nome` +
		`) VALUES (` +
		`$1, $2` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`nome = EXCLUDED.nome `
	// run
	logf(sqlstr, p.ID, p.Nome)
	if _, err := db.ExecContext(ctx, sqlstr, p.ID, p.Nome); err != nil {
		return logerror(err)
	}
	// set exists
	p._exists = true
	return nil
}

// Delete deletes the [Pessoa] from the database.
func (p *Pessoa) Delete(ctx context.Context, db DB) error {
	switch {
	case !p._exists: // doesn't exist
		return nil
	case p._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.pessoa ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, p.ID)
	if _, err := db.ExecContext(ctx, sqlstr, p.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	p._deleted = true
	return nil
}

// PessoaByNome retrieves a row from 'public.pessoa' as a [Pessoa].
//
// Generated from index 'pessoa_nome_idx'.
func PessoaByNome(ctx context.Context, db DB, nome string) ([]*Pessoa, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, nome ` +
		`FROM public.pessoa ` +
		`WHERE nome = $1`
	// run
	logf(sqlstr, nome)
	rows, err := db.QueryContext(ctx, sqlstr, nome)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Pessoa
	for rows.Next() {
		p := Pessoa{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&p.ID, &p.Nome); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &p)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// PessoaByID retrieves a row from 'public.pessoa' as a [Pessoa].
//
// Generated from index 'pessoa_pk'.
func PessoaByID(ctx context.Context, db DB, id int) (*Pessoa, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, nome ` +
		`FROM public.pessoa ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	p := Pessoa{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&p.ID, &p.Nome); err != nil {
		return nil, logerror(err)
	}
	return &p, nil
}
