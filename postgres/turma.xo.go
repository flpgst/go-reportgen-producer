package postgres

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// Turma represents a row from 'public.turma'.
type Turma struct {
	ID          int           `json:"id"`           // id
	Nome        string        `json:"nome"`         // nome
	MatriculaID sql.NullInt64 `json:"matricula_id"` // matricula_id
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Turma] exists in the database.
func (t *Turma) Exists() bool {
	return t._exists
}

// Deleted returns true when the [Turma] has been marked for deletion
// from the database.
func (t *Turma) Deleted() bool {
	return t._deleted
}

// Insert inserts the [Turma] to the database.
func (t *Turma) Insert(ctx context.Context, db DB) error {
	switch {
	case t._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case t._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.turma (` +
		`nome, matricula_id` +
		`) VALUES (` +
		`$1, $2` +
		`) RETURNING id`
	// run
	logf(sqlstr, t.Nome, t.MatriculaID)
	if err := db.QueryRowContext(ctx, sqlstr, t.Nome, t.MatriculaID).Scan(&t.ID); err != nil {
		return logerror(err)
	}
	// set exists
	t._exists = true
	return nil
}

// Update updates a [Turma] in the database.
func (t *Turma) Update(ctx context.Context, db DB) error {
	switch {
	case !t._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case t._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.turma SET ` +
		`nome = $1, matricula_id = $2 ` +
		`WHERE id = $3`
	// run
	logf(sqlstr, t.Nome, t.MatriculaID, t.ID)
	if _, err := db.ExecContext(ctx, sqlstr, t.Nome, t.MatriculaID, t.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Turma] to the database.
func (t *Turma) Save(ctx context.Context, db DB) error {
	if t.Exists() {
		return t.Update(ctx, db)
	}
	return t.Insert(ctx, db)
}

// Upsert performs an upsert for [Turma].
func (t *Turma) Upsert(ctx context.Context, db DB) error {
	switch {
	case t._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.turma (` +
		`id, nome, matricula_id` +
		`) VALUES (` +
		`$1, $2, $3` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`nome = EXCLUDED.nome, matricula_id = EXCLUDED.matricula_id `
	// run
	logf(sqlstr, t.ID, t.Nome, t.MatriculaID)
	if _, err := db.ExecContext(ctx, sqlstr, t.ID, t.Nome, t.MatriculaID); err != nil {
		return logerror(err)
	}
	// set exists
	t._exists = true
	return nil
}

// Delete deletes the [Turma] from the database.
func (t *Turma) Delete(ctx context.Context, db DB) error {
	switch {
	case !t._exists: // doesn't exist
		return nil
	case t._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.turma ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, t.ID)
	if _, err := db.ExecContext(ctx, sqlstr, t.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	t._deleted = true
	return nil
}

// TurmaByID retrieves a row from 'public.turma' as a [Turma].
//
// Generated from index 'turma_pk'.
func TurmaByID(ctx context.Context, db DB, id int) (*Turma, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, nome, matricula_id ` +
		`FROM public.turma ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	t := Turma{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&t.ID, &t.Nome, &t.MatriculaID); err != nil {
		return nil, logerror(err)
	}
	return &t, nil
}

// Matricula returns the Matricula associated with the [Turma]'s (MatriculaID).
//
// Generated from foreign key 'turma_fk'.
func (t *Turma) Matricula(ctx context.Context, db DB) (*Matricula, error) {
	return MatriculaByID(ctx, db, int(t.MatriculaID.Int64))
}
